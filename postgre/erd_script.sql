-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS bluetour.city
(
    cityid bigserial NOT NULL,
    cityname character varying(60) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT city_pkey PRIMARY KEY (cityid)
);

CREATE TABLE IF NOT EXISTS bluetour.county
(
    countyid bigserial NOT NULL,
    countyname character varying(65) COLLATE pg_catalog."default" NOT NULL,
    cityid integer NOT NULL,
    CONSTRAINT county_pkey PRIMARY KEY (countyid),
	CONSTRAINT unique_countyname_per_city UNIQUE (countyname, cityid)
);

CREATE TABLE IF NOT EXISTS bluetour.allstops
(
    stopid bigserial NOT NULL,
    latitude double precision NOT NULL,
    longitude double precision NOT NULL,
    stop_countyid integer NOT NULL,
    stopname character varying(250) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    CONSTRAINT allstops_pkey PRIMARY KEY (stopid),
	CONSTRAINT unique_lat_long UNIQUE (latitude, longitude, stop_countyid) 
);

CREATE TABLE IF NOT EXISTS bluetour.stoptype
(
    stoptype_id bigserial NOT NULL,
    type character varying(35) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT stoptype_pkey PRIMARY KEY (stoptype_id)
);

CREATE TABLE IF NOT EXISTS bluetour.allstops_stoptype
(
    allstops_stopid bigint NOT NULL,
    stoptype_stoptype_id bigint NOT NULL,
    CONSTRAINT allstops_stoptype_pkey PRIMARY KEY (allstops_stopid, stoptype_stoptype_id)
);

CREATE TABLE IF NOT EXISTS bluetour.appuser
(
    userid bigserial NOT NULL,
    usertype smallint NOT NULL,
    useremail character varying(60) COLLATE pg_catalog."default" NOT NULL,
    username character varying(45) COLLATE pg_catalog."default" NOT NULL,
    userphone character varying(15) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    userpassword character varying(24) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT appuser_pkey PRIMARY KEY (userid),
    CONSTRAINT appuser_useremail_unique UNIQUE (useremail),
    CONSTRAINT appuser_username_unique UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS bluetour.captainuser
(
    appuserid integer NOT NULL,
    bancount integer DEFAULT 0,
    iswork boolean,
    CONSTRAINT captainuser_pkey PRIMARY KEY (appuserid)
);

CREATE TABLE IF NOT EXISTS bluetour.boattype
(
    boattypeid bigint NOT NULL,
    boattype character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT boattype_pkey PRIMARY KEY (boattypeid),
	CONSTRAINT unique_boattype UNIQUE (boattype)
);

CREATE TABLE IF NOT EXISTS bluetour.material
(
    materialid serial NOT NULL,
    materialname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT material_pkey PRIMARY KEY (materialid),
	CONSTRAINT unique_material_name UNIQUE (materialname)
);

CREATE TABLE IF NOT EXISTS bluetour.boat
(
    registrationnumber INTEGER NOT NULL,
    captainid INTEGER NOT NULL,
    boatname VARCHAR(65) COLLATE pg_catalog."default",
    boattypeid INTEGER,
    manufacturematerial INTEGER,
    taxnumber VARCHAR(45) COLLATE pg_catalog."default" NOT NULL,
    taxoffice VARCHAR(75) COLLATE pg_catalog."default" NOT NULL,
    boundport VARCHAR(100) NOT NULL, 
    CONSTRAINT boat_pkey PRIMARY KEY (registrationnumber),
    CONSTRAINT unique_boatname_per_port UNIQUE (boatname, boundport) -- UNIQUE constraint eklendi
);

CREATE TABLE IF NOT EXISTS bluetour.tour
(
    boatregistrationnumber integer NOT NULL,
    tourname character varying(60) COLLATE pg_catalog."default" NOT NULL,
    isdivingtour boolean,
    isfishingtour boolean,
    isdailytour boolean,
    isovernighttour boolean,
    isspecialtour boolean,
    capacity integer NOT NULL,
    foodstate boolean,
    isavaliable boolean DEFAULT true,
	foodpriceperperson integer,
	foodprice integer,
	description character varying(250) default null,
    countyid integer NOT NULL,
    CONSTRAINT tour_pkey PRIMARY KEY (boatregistrationnumber),
    CONSTRAINT tour_boat_fk FOREIGN KEY (boatregistrationnumber) REFERENCES bluetour.boat(registrationnumber)
);

CREATE TABLE IF NOT EXISTS bluetour.rezervation
(
    rezervationid bigserial NOT NULL,
    appuserid integer NOT NULL,
    tourid integer NOT NULL,
    rezervcapacity integer NOT NULL,
    starttime time without time zone NOT NULL,
    endtime time without time zone NOT NULL,
    rezervdate date NOT NULL,
	rezervtourtype character varying(55) not null,
	rezervprice integer not null,
    isfoodinclude boolean NOT NULL DEFAULT false,
    CONSTRAINT rezervation_pkey PRIMARY KEY (rezervationid)
);

CREATE TABLE IF NOT EXISTS bluetour.tour_allstops
(
    tour_tourid integer NOT NULL,
    allstops_stopid integer NOT NULL,
	CONSTRAINT tour_allstops_pkey PRIMARY KEY (tour_tourid, allstops_stopid)
);

CREATE TABLE IF NOT EXISTS bluetour.rezervation_tour_allstops
(
    rezervation_rezervationid bigserial NOT NULL,
    tour_tourid integer NOT NULL,
    allstops_stopid integer NOT NULL,
    PRIMARY KEY (rezervation_rezervationid, tour_tourid,allstops_stopid),
    CONSTRAINT fk_tour_allstops FOREIGN KEY (tour_tourid, allstops_stopid)
    REFERENCES bluetour.tour_allstops (tour_tourid, allstops_stopid),
	CONSTRAINT fk_rezervation FOREIGN KEY (rezervation_rezervationid)
	REFERENCES bluetour.rezervation (rezervationid)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS bluetour.context
(
    contextid bigserial NOT NULL,
    contextname character varying(50),
    CONSTRAINT context_pkey PRIMARY KEY (contextid)
);

CREATE TABLE IF NOT EXISTS bluetour.plan (
    plantourid BIGINT NOT NULL,  
    tourtype character varying(50) NOT NULL,
    tourcapacity INT NOT NULL,
    defaultstarttime TIME NOT NULL,
    defaultendtime TIME NOT NULL,
	tourprice integer not null,
	feeunit character varying(5) not null,
    PRIMARY KEY (plantourid, tourtype, defaultstarttime, defaultendtime),  -- Composite Primary Key (Bir turda aynÄ± tipten sadece 1 plan olabilir)
    CONSTRAINT fk_plan_tour FOREIGN KEY (plantourid) REFERENCES bluetour.tour(boatregistrationnumber) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS bluetour.tourcontext
(
    context_contextid integer NOT NULL,
    tour_tourid integer NOT NULL,
    CONSTRAINT fk_tour FOREIGN KEY (tour_tourid) REFERENCES bluetour.tour (boatregistrationnumber) ON DELETE CASCADE,
    CONSTRAINT fk_context FOREIGN KEY (context_contextid) REFERENCES bluetour.context (contextid) ON DELETE CASCADE,
    CONSTRAINT tourcontext_pkey PRIMARY KEY (context_contextid, tour_tourid)
);

-- BURADA DATASETTE KALDIK.
CREATE TABLE IF NOT EXISTS bluetour.vote
(
    voteid bigserial NOT NULL,
    votescore double precision NOT NULL,
    votedate date NOT NULL,
    appuserid integer NOT NULL,
    tourid integer NOT NULL,
    CONSTRAINT vote_pkey PRIMARY KEY (voteid)
);

CREATE TABLE IF NOT EXISTS bluetour.comment
(
    commentid bigserial NOT NULL,
    commenttext character varying(250) COLLATE pg_catalog."default" NOT NULL,
    commentdate date,
    appuserid integer NOT NULL,
    tourid integer NOT NULL,
    CONSTRAINT comment_pkey PRIMARY KEY (commentid)
);


CREATE TABLE IF NOT EXISTS bluetour.enjoyment
(
    enjoymentid bigserial NOT NULL,
    enjoyment boolean NOT NULL,
    enjoymentdate date,
    appuserid integer NOT NULL,
    tourid integer NOT NULL,
    CONSTRAINT enjoyment_pkey PRIMARY KEY (enjoymentid)
);


CREATE TABLE IF NOT EXISTS bluetour.report
(
    reportid bigserial NOT NULL,
    reportalert character varying(45) COLLATE pg_catalog."default" NOT NULL,
    reportdate date,
    appuserid integer NOT NULL,
    tourid integer NOT NULL,
    CONSTRAINT report_pkey PRIMARY KEY (reportid)
);


ALTER TABLE IF EXISTS bluetour.allstops
    ADD CONSTRAINT allstops_stop_countyid_fkey FOREIGN KEY (stop_countyid)
    REFERENCES bluetour.county (countyid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS bluetour.allstops_stoptype
    ADD CONSTRAINT allstops_stoptype_allstops_stopid_fkey FOREIGN KEY (allstops_stopid)
    REFERENCES bluetour.allstops (stopid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS bluetour.allstops_stoptype
    ADD CONSTRAINT allstops_stoptype_stoptype_stoptype_id_fkey FOREIGN KEY (stoptype_stoptype_id)
    REFERENCES bluetour.stoptype (stoptype_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS bluetour.boat
    ADD CONSTRAINT boat_boattypeid_fkey FOREIGN KEY (boattypeid)
    REFERENCES bluetour.boattype (boattypeid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.boat
    ADD CONSTRAINT boat_material_fk FOREIGN KEY (manufacturematerial)
    REFERENCES bluetour.material (materialid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS bluetour.captainuser
    ADD CONSTRAINT captainuser_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS bluetour.boat
    ADD CONSTRAINT boat_captainid_fkey FOREIGN KEY (captainid)
    REFERENCES bluetour.captainuser (appuserid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS bluetour.comment
    ADD CONSTRAINT comment_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.comment
    ADD CONSTRAINT comment_tourid_fkey FOREIGN KEY (tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.county
    ADD CONSTRAINT county_cityid_fkey FOREIGN KEY (cityid)
    REFERENCES bluetour.city (cityid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.county
    ADD CONSTRAINT county_fkey FOREIGN KEY (cityid)
    REFERENCES bluetour.city (cityid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS bluetour.enjoyment
    ADD CONSTRAINT enjoyment_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.enjoyment
    ADD CONSTRAINT enjoyment_tourid_fkey FOREIGN KEY (tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.report
    ADD CONSTRAINT report_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.report
    ADD CONSTRAINT report_tourid_fkey FOREIGN KEY (tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.rezervation
    ADD CONSTRAINT rezervation_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.rezervation
    ADD CONSTRAINT rezervation_tourid_fkey FOREIGN KEY (tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.tour
    ADD CONSTRAINT tour_boatregistrationnumber_fkey FOREIGN KEY (boatregistrationnumber)
    REFERENCES bluetour.boat (registrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.tour
    ADD CONSTRAINT tour_countyid_fkey FOREIGN KEY (countyid)
    REFERENCES bluetour.county (countyid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
	

ALTER TABLE IF EXISTS bluetour.vote
    ADD CONSTRAINT vote_appuserid_fkey FOREIGN KEY (appuserid)
    REFERENCES bluetour.appuser (userid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.vote
    ADD CONSTRAINT vote_tourid_fkey FOREIGN KEY (tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS bluetour.tour_allstops
    ADD CONSTRAINT tour_allstops_tourid_fkey FOREIGN KEY (tour_tourid)
    REFERENCES bluetour.tour (boatregistrationnumber) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS bluetour.tour_allstops
    ADD CONSTRAINT tour_allstops_stopid_fkey FOREIGN KEY (allstops_stopid)
    REFERENCES bluetour.allstops (stopid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;




END;